---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

import TypedMap from "../components/react/TypedMap";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
    return Astro.redirect("/signin");
}

let session;
try {
    session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
    });
    if (session.error) {
        Astro.cookies.delete("sb-access-token", {
            path: "/",
        });
        Astro.cookies.delete("sb-refresh-token", {
            path: "/",
        });
        return Astro.redirect("/signin");
    }
} catch (error) {
    Astro.cookies.delete("sb-access-token", {
        path: "/",
    });
    Astro.cookies.delete("sb-refresh-token", {
        path: "/",
    });
    return Astro.redirect("/signin");
}

let { data, error } = await supabase.from("personal-records").select("*");

let records;
if (data?.length == 0 || !data) records = false;
else {
    records = data.map((r) => {
        const date = new Date(r.created_at);
        const pad = (num: number) => String(num).padStart(2, "0");
        const day = pad(date.getDate());
        const month = pad(date.getMonth() + 1);
        const year = date.getFullYear();
        const formattedDate = `${day}/${month}/${year}`;
        return {
            time: r.time,
            formattedDate: formattedDate,
            attempts: r.attempts,
        };
    });
    records.sort((a, b) => a.time - b.time);
}
---

<Layout title="dashboard">
    <main class="flex flex-col justify-start items-center h-full w-full gap-4">
        <h1>Welcome</h1>
        <h3>{records ? "Your Records:" : "You have no records saved"}</h3>
        {
            records && Array.isArray(records) && (
                <div
                    class={
                        "grid gap-4 justify-items-center grid-cols-" +
                        records.length
                    }
                >
                    {records.map((r) => (
                        <div class="border-2 border-white rounded-lg p-4 flex flex-col gap-4 bg-blur">
                            <div class="col-span-2">
                                <TypedMap client:load typedMap={r.attempts} />
                            </div>
                            <div class="flex justify-between gap-4">
                                <span>{r.formattedDate}</span>
                                <span class="flex gap-0">
                                    <span>
                                        {Math.floor(r.time / 100 / 60) % 60 < 10
                                            ? "0" +
                                              (Math.floor(r.time / 100 / 60) %
                                                  60)
                                            : Math.floor(r.time / 100 / 60) %
                                              60}
                                    </span>
                                    <span>:</span>
                                    <span>
                                        {Math.floor(r.time / 100) % 60 < 10
                                            ? "0" +
                                              (Math.floor(r.time / 100) % 60)
                                            : Math.floor(r.time / 100) % 60}
                                    </span>
                                    <span>:</span>
                                    <span>
                                        {Math.floor(r.time) % 100 < 10
                                            ? "0" + (Math.floor(r.time) % 100)
                                            : Math.floor(r.time) % 100}
                                    </span>
                                </span>
                            </div>
                        </div>
                    ))}
                </div>
            )
        }
    </main>
</Layout>
